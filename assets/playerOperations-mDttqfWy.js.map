{"version":3,"file":"playerOperations-mDttqfWy.js","sources":["../../src/utils/players/initialPlayersData.ts","../../src/utils/players/playerStorage.ts","../../src/utils/players/playerOperations.ts"],"sourcesContent":["\nimport { Player } from '@/types/player';\n\n// Initial sample players data that can be fully managed\nexport const initialPlayers: Player[] = [\n  {\n    id: 'player1',\n    name: 'Александр Петров',\n    position: 'Вратарь',\n    number: 1,\n    birthDate: '15.03.1998',\n    height: 188,\n    weight: 82,\n    nationality: 'Россия',\n    image: 'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?ixlib=rb-4.0.3',\n    matches: 24,\n    goals: 0,\n    assists: 2,\n    yellowCards: 1,\n    redCards: 0,\n    teamId: 'gudauta'\n  },\n  {\n    id: 'player2',\n    name: 'Иван Соколов',\n    position: 'Защитник',\n    number: 4,\n    birthDate: '22.07.1996',\n    height: 185,\n    weight: 78,\n    nationality: 'Россия',\n    image: 'https://images.unsplash.com/photo-1539571696357-5a69c17a67c6?ixlib=rb-4.0.3',\n    matches: 28,\n    goals: 1,\n    assists: 3,\n    yellowCards: 4,\n    redCards: 0,\n    teamId: 'gudauta'\n  },\n  {\n    id: 'player3',\n    name: 'Михаил Волков',\n    position: 'Полузащитник',\n    number: 10,\n    birthDate: '05.05.1999',\n    height: 175,\n    weight: 70,\n    nationality: 'Россия',\n    image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3',\n    matches: 30,\n    goals: 8,\n    assists: 12,\n    yellowCards: 2,\n    redCards: 0,\n    teamId: 'gudauta'\n  },\n  {\n    id: 'player4',\n    name: 'Артем Козлов',\n    position: 'Нападающий',\n    number: 9,\n    birthDate: '12.10.1997',\n    height: 182,\n    weight: 76,\n    nationality: 'Россия',\n    image: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-4.0.3',\n    matches: 26,\n    goals: 15,\n    assists: 5,\n    yellowCards: 3,\n    redCards: 1,\n    teamId: 'gudauta'\n  }\n  // Removed school players (Егор Морозов, Кирилл Попов, Максим Лебедев)\n];\n","\nimport { Player } from '@/types/player';\nimport { initialPlayers } from './initialPlayersData';\n\n// Load players from localStorage or use initialPlayers if not found\nexport const loadPlayers = (): Player[] => {\n  try {\n    const savedPlayers = localStorage.getItem('players');\n    if (savedPlayers) {\n      return JSON.parse(savedPlayers);\n    }\n  } catch (error) {\n    console.error('Failed to load players from localStorage:', error);\n  }\n  \n  // Save initial players to localStorage on first load\n  try {\n    localStorage.setItem('players', JSON.stringify(initialPlayers));\n  } catch (error) {\n    console.error('Failed to save initial players to localStorage:', error);\n  }\n  \n  return initialPlayers;\n};\n\n// Save players to localStorage\nexport const savePlayers = (players: Player[]): void => {\n  try {\n    localStorage.setItem('players', JSON.stringify(players));\n  } catch (error) {\n    console.error('Failed to save players to localStorage:', error);\n  }\n};\n","\nimport { Player } from '@/types/player';\nimport { loadPlayers, savePlayers } from './playerStorage';\n\n// Initialize players array\nlet players: Player[] = loadPlayers();\n\n// Get all players\nexport const getPlayersData = (): Player[] => {\n  return [...players];\n};\n\n// Get players for a specific team\nexport const getPlayersByTeam = (teamId: string): Player[] => {\n  return players.filter(player => player.teamId === teamId);\n};\n\n// Get a specific player by ID\nexport const getPlayerById = (id: string): Player | undefined => {\n  return players.find(player => player.id === id);\n};\n\n// Update a player\nexport const updatePlayer = (updatedPlayer: Player): void => {\n  players = players.map(player => \n    player.id === updatedPlayer.id ? updatedPlayer : player\n  );\n  \n  // Save changes to localStorage\n  savePlayers(players);\n};\n\n// Add a new player\nexport const createPlayer = (newPlayer: Player): void => {\n  players.push(newPlayer);\n  \n  // Save changes to localStorage\n  savePlayers(players);\n};\n\n// Delete a player\nexport const deletePlayer = (id: string): void => {\n  players = players.filter(player => player.id !== id);\n  \n  // Save changes to localStorage\n  savePlayers(players);\n};\n"],"names":["initialPlayers","loadPlayers","savedPlayers","error","savePlayers","players","getPlayersByTeam","teamId","player","updatePlayer","updatedPlayer","createPlayer","newPlayer","deletePlayer","id"],"mappings":"AAIO,MAAMA,EAA2B,CACtC,CACE,GAAI,UACJ,KAAM,mBACN,SAAU,UACV,OAAQ,EACR,UAAW,aACX,OAAQ,IACR,OAAQ,GACR,YAAa,SACb,MAAO,8EACP,QAAS,GACT,MAAO,EACP,QAAS,EACT,YAAa,EACb,SAAU,EACV,OAAQ,SACV,EACA,CACE,GAAI,UACJ,KAAM,eACN,SAAU,WACV,OAAQ,EACR,UAAW,aACX,OAAQ,IACR,OAAQ,GACR,YAAa,SACb,MAAO,8EACP,QAAS,GACT,MAAO,EACP,QAAS,EACT,YAAa,EACb,SAAU,EACV,OAAQ,SACV,EACA,CACE,GAAI,UACJ,KAAM,gBACN,SAAU,eACV,OAAQ,GACR,UAAW,aACX,OAAQ,IACR,OAAQ,GACR,YAAa,SACb,MAAO,8EACP,QAAS,GACT,MAAO,EACP,QAAS,GACT,YAAa,EACb,SAAU,EACV,OAAQ,SACV,EACA,CACE,GAAI,UACJ,KAAM,eACN,SAAU,aACV,OAAQ,EACR,UAAW,aACX,OAAQ,IACR,OAAQ,GACR,YAAa,SACb,MAAO,8EACP,QAAS,GACT,MAAO,GACP,QAAS,EACT,YAAa,EACb,SAAU,EACV,OAAQ,SACV,CAEF,ECrEaC,EAAc,IAAgB,CACrC,GAAA,CACI,MAAAC,EAAe,aAAa,QAAQ,SAAS,EACnD,GAAIA,EACK,OAAA,KAAK,MAAMA,CAAY,QAEzBC,EAAO,CACN,QAAA,MAAM,4CAA6CA,CAAK,CAClE,CAGI,GAAA,CACF,aAAa,QAAQ,UAAW,KAAK,UAAUH,CAAc,CAAC,QACvDG,EAAO,CACN,QAAA,MAAM,kDAAmDA,CAAK,CACxE,CAEO,OAAAH,CACT,EAGaI,EAAeC,GAA4B,CAClD,GAAA,CACF,aAAa,QAAQ,UAAW,KAAK,UAAUA,CAAO,CAAC,QAChDF,EAAO,CACN,QAAA,MAAM,0CAA2CA,CAAK,CAChE,CACF,EC3BA,IAAIE,EAAoBJ,EAAY,EAQvB,MAAAK,EAAoBC,GACxBF,EAAQ,OAAiBG,GAAAA,EAAO,SAAWD,CAAM,EAS7CE,EAAgBC,GAAgC,CAC3DL,EAAUA,EAAQ,IAChBG,GAAAA,EAAO,KAAOE,EAAc,GAAKA,EAAgBF,CAAA,EAInDJ,EAAYC,CAAO,CACrB,EAGaM,EAAgBC,GAA4B,CACvDP,EAAQ,KAAKO,CAAS,EAGtBR,EAAYC,CAAO,CACrB,EAGaQ,EAAgBC,GAAqB,CAChDT,EAAUA,EAAQ,OAAiBG,GAAAA,EAAO,KAAOM,CAAE,EAGnDV,EAAYC,CAAO,CACrB"}